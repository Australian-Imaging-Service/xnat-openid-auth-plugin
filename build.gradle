buildscript {
    ext {
        vXnatDev = '1.7.6'
        vXnat = '1.7.6'
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
            name 'XNAT Release Repository'
        }
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
            name 'XNAT Snapshot Repository'
        }
    }
    dependencies {
        classpath "org.nrg.xnat.build:xnat-data-builder:${vXnat}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.8.0"
    }
}

group 'au.edu.qcif.xnat.openid'
version '1.0.0-SNAPSHOT'

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'xnat-data-builder'
apply plugin: 'com.palantir.git-version'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
        name 'XNAT Release Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
        name 'XNAT Snapshot Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/ext-release'
        name 'XNAT External Release Repository'
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations {
    compile.extendsFrom(compileAndInclude)

    all {
        exclude group: "javax.sql", module: "jdbc-stdext"
        exclude group: "javax.transaction", module: "jta"
    }
}

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

dependencies {
    compileOnly "org.nrg.xnat:web:${vXnatDev}"
    compileOnly "org.nrg.xnat:xnat-data-models"
    compileOnly "org.nrg.xdat:core:${vXnatDev}"
    compileOnly "org.projectlombok:lombok"
    compileOnly "org.slf4j:slf4j-api"

    annotationProcessor "org.projectlombok:lombok"
}

jar {
    manifest {
        attributes 'Application-Name': 'XNAT OpenID Authentication Provider',
                'Build-Date': new Date(),
                'Implementation-Sha': gitVersion(),
                'Implementation-Version': version
    }
	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

task fatJar(type: Jar) {
    zip64 true
    baseName = project.name + '-all'
    from {
        configurations.compileAndInclude.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA"
    }
    with jar
}
